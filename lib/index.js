var AllowedPaths, AllowedPathsRoles, ErrorHandler, _, _pickAllowedPaths, traverse,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

_ = require('lodash');

traverse = require('traverse');

ErrorHandler = require('error-handler');

AllowedPaths = function(arrAllowedPaths) {
  return function(req, res, next) {
    req.allowedParams = _pickAllowedPaths(arrAllowedPaths, req);
    return next();
  };
};

AllowedPathsRoles = function(objAllowedPaths, arg) {
  var ref, userFieldName, userRolesFieldName;
  ref = arg != null ? arg : {}, userFieldName = ref.userFieldName, userRolesFieldName = ref.userRolesFieldName;
  return function(req, res, next) {
    var allowedRoles, arrAllowedPaths, objUser, pathToRoles, pathToUser, strRole, userRolesField;
    if (!(objAllowedPaths && (_.keys(objAllowedPaths)).length && _.isPlainObject(objAllowedPaths))) {
      throw new Error('Dict of allowed paths for roles is required');
    }
    if (userFieldName == null) {
      userFieldName = 'user';
    }
    if (userRolesFieldName == null) {
      userRolesFieldName = 'roles';
    }
    pathToUser = userFieldName.split('.');
    if (!traverse(req).has(pathToUser)) {
      throw new Error("There is no " + userFieldName + " in req");
    }
    objUser = traverse(req).get(pathToUser);
    pathToRoles = _.union(['_doc'], userRolesFieldName.split('.'));
    if (traverse(objUser).has(pathToRoles)) {
      userRolesField = traverse(objUser).get(pathToRoles);
    } else if (_.isFunction(objUser[userRolesFieldName])) {
      userRolesField = objUser[userRolesFieldName]();
    }
    if (!_.isArray(userRolesField)) {
      throw new Error('User roles field must contain array of roles');
    }
    allowedRoles = _.intersection(userRolesField, _.keys(objAllowedPaths));
    if (!((allowedRoles != null) && allowedRoles.length)) {
      return next(new ErrorHandler.PrivilagesError("You don't have privilages"));
    }
    for (strRole in objAllowedPaths) {
      arrAllowedPaths = objAllowedPaths[strRole];
      if (indexOf.call(allowedRoles, strRole) >= 0) {
        if (req.allowedParams == null) {
          req.allowedParams = {};
        }
        req.allowedParams = _.assign(req.allowedParams, _pickAllowedPaths(arrAllowedPaths, req));
      }
    }
    return next();
  };
};

_pickAllowedPaths = function(arrAllowedPaths, reqObj) {
  var allowedParams, arrAllowedPathsSplit, arrAllowedPathsVals;
  if (!(arrAllowedPaths && arrAllowedPaths.length && _.isArray(arrAllowedPaths))) {
    throw new Error('Array of allowed paths is required');
  }
  arrAllowedPathsSplit = _.map(arrAllowedPaths, function(allowedPath) {
    return allowedPath.split('.');
  });
  arrAllowedPathsVals = _.map(arrAllowedPathsSplit, function(components) {
    var ref;
    return (ref = traverse(reqObj.body).get(components)) != null ? ref : traverse(reqObj.body).get(components);
  });
  allowedParams = _.zipObject(arrAllowedPaths, arrAllowedPathsVals);
  allowedParams = _.pick(allowedParams, function(param) {
    return param != null;
  });
  return allowedParams;
};

module.exports = {
  AllowedPaths: AllowedPaths,
  AllowedPathsRoles: AllowedPathsRoles
};

//# sourceMappingURL=data:application/json;base64,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LENBQUE7U0FTQSxjQVZrQjtBQUFBLENBN0NwQixDQUFBOztBQUFBLE1BMERNLENBQUMsT0FBUCxHQUNFO0FBQUEsRUFBQSxZQUFBLEVBQWMsWUFBZDtBQUFBLEVBQ0EsaUJBQUEsRUFBbUIsaUJBRG5CO0NBM0RGLENBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIGFsbG93ZWRwYXRocy1taWRkbGV3YXJlXG5fICAgICAgICAgICAgID0gcmVxdWlyZSgnbG9kYXNoJylcbnRyYXZlcnNlICAgICAgPSByZXF1aXJlKCd0cmF2ZXJzZScpXG5FcnJvckhhbmRsZXIgID0gcmVxdWlyZSgnZXJyb3ItaGFuZGxlcicpXG5cblxuQWxsb3dlZFBhdGhzID0gKGFyckFsbG93ZWRQYXRocykgLT5cbiAgKHJlcSwgcmVzLCBuZXh0KSAtPlxuICAgIHJlcS5hbGxvd2VkUGFyYW1zID0gX3BpY2tBbGxvd2VkUGF0aHMgYXJyQWxsb3dlZFBhdGhzLCByZXFcbiAgICBuZXh0KClcblxuQWxsb3dlZFBhdGhzUm9sZXMgPSAob2JqQWxsb3dlZFBhdGhzLCB7dXNlckZpZWxkTmFtZSwgdXNlclJvbGVzRmllbGROYW1lfSA9IHt9KSAtPlxuICAocmVxLCByZXMsIG5leHQpIC0+XG4gICAgdW5sZXNzIG9iakFsbG93ZWRQYXRocyBhbmQgKF8ua2V5cyBvYmpBbGxvd2VkUGF0aHMpLmxlbmd0aCBhbmQgXy5pc1BsYWluT2JqZWN0IG9iakFsbG93ZWRQYXRoc1xuICAgICAgdGhyb3cgbmV3IEVycm9yICdEaWN0IG9mIGFsbG93ZWQgcGF0aHMgZm9yIHJvbGVzIGlzIHJlcXVpcmVkJ1xuXG4gICAgdXNlckZpZWxkTmFtZSAgICAgID89ICd1c2VyJ1xuICAgIHVzZXJSb2xlc0ZpZWxkTmFtZSA/PSAncm9sZXMnXG5cbiAgICBwYXRoVG9Vc2VyID0gdXNlckZpZWxkTmFtZS5zcGxpdCAnLidcbiAgICB1bmxlc3MgdHJhdmVyc2UocmVxKS5oYXMocGF0aFRvVXNlcilcbiAgICAgIHRocm93IG5ldyBFcnJvciBcIlRoZXJlIGlzIG5vICN7dXNlckZpZWxkTmFtZX0gaW4gcmVxXCJcblxuICAgIG9ialVzZXIgPSB0cmF2ZXJzZShyZXEpLmdldChwYXRoVG9Vc2VyKVxuXG4gICAgcGF0aFRvUm9sZXMgPSBfLnVuaW9uIFsnX2RvYyddLCB1c2VyUm9sZXNGaWVsZE5hbWUuc3BsaXQgJy4nXG4gICAgaWYgdHJhdmVyc2Uob2JqVXNlcikuaGFzIHBhdGhUb1JvbGVzXG4gICAgICB1c2VyUm9sZXNGaWVsZCA9IHRyYXZlcnNlKG9ialVzZXIpLmdldChwYXRoVG9Sb2xlcylcbiAgICBlbHNlIGlmIF8uaXNGdW5jdGlvbiBvYmpVc2VyW3VzZXJSb2xlc0ZpZWxkTmFtZV1cbiAgICAgIHVzZXJSb2xlc0ZpZWxkID0gb2JqVXNlclt1c2VyUm9sZXNGaWVsZE5hbWVdKClcblxuICAgIHVubGVzcyBfLmlzQXJyYXkgdXNlclJvbGVzRmllbGRcbiAgICAgIHRocm93IG5ldyBFcnJvciAnVXNlciByb2xlcyBmaWVsZCBtdXN0IGNvbnRhaW4gYXJyYXkgb2Ygcm9sZXMnXG5cbiAgICBhbGxvd2VkUm9sZXMgPSBfLmludGVyc2VjdGlvbiB1c2VyUm9sZXNGaWVsZCwgXy5rZXlzIG9iakFsbG93ZWRQYXRoc1xuXG4gICAgdW5sZXNzIGFsbG93ZWRSb2xlcz8gYW5kIGFsbG93ZWRSb2xlcy5sZW5ndGhcbiAgICAgIHJldHVybiBuZXh0KG5ldyBFcnJvckhhbmRsZXIuUHJpdmlsYWdlc0Vycm9yIFwiWW91IGRvbid0IGhhdmUgcHJpdmlsYWdlc1wiKVxuXG4gICAgZm9yIHN0clJvbGUsIGFyckFsbG93ZWRQYXRocyBvZiBvYmpBbGxvd2VkUGF0aHNcbiAgICAgIGlmIHN0clJvbGUgaW4gYWxsb3dlZFJvbGVzXG4gICAgICAgIHJlcS5hbGxvd2VkUGFyYW1zID89IHt9XG4gICAgICAgIHJlcS5hbGxvd2VkUGFyYW1zID0gXy5hc3NpZ24gcmVxLmFsbG93ZWRQYXJhbXMsIF9waWNrQWxsb3dlZFBhdGhzKGFyckFsbG93ZWRQYXRocywgcmVxKVxuXG4gICAgbmV4dCgpXG5cbl9waWNrQWxsb3dlZFBhdGhzID0gKGFyckFsbG93ZWRQYXRocywgcmVxT2JqKSAtPlxuICB1bmxlc3MgYXJyQWxsb3dlZFBhdGhzIGFuZCBhcnJBbGxvd2VkUGF0aHMubGVuZ3RoIGFuZCBfLmlzQXJyYXkgYXJyQWxsb3dlZFBhdGhzXG4gICAgdGhyb3cgbmV3IEVycm9yICdBcnJheSBvZiBhbGxvd2VkIHBhdGhzIGlzIHJlcXVpcmVkJ1xuXG4gIGFyckFsbG93ZWRQYXRoc1NwbGl0ID0gXy5tYXAgYXJyQWxsb3dlZFBhdGhzLCAoYWxsb3dlZFBhdGgpIC0+IGFsbG93ZWRQYXRoLnNwbGl0ICcuJ1xuICBhcnJBbGxvd2VkUGF0aHNWYWxzICA9IF8ubWFwIGFyckFsbG93ZWRQYXRoc1NwbGl0LCAoY29tcG9uZW50cykgLT4gdHJhdmVyc2UocmVxT2JqLmJvZHkpLmdldChjb21wb25lbnRzKSA/IHRyYXZlcnNlKHJlcU9iai5ib2R5KS5nZXQoY29tcG9uZW50cylcblxuICBhbGxvd2VkUGFyYW1zID0gXy56aXBPYmplY3QgYXJyQWxsb3dlZFBhdGhzLCBhcnJBbGxvd2VkUGF0aHNWYWxzXG4gIGFsbG93ZWRQYXJhbXMgPSBfLnBpY2sgYWxsb3dlZFBhcmFtcywgKHBhcmFtKSAtPiBwYXJhbT9cblxuICBhbGxvd2VkUGFyYW1zXG5cblxubW9kdWxlLmV4cG9ydHMgPVxuICBBbGxvd2VkUGF0aHM6IEFsbG93ZWRQYXRoc1xuICBBbGxvd2VkUGF0aHNSb2xlczogQWxsb3dlZFBhdGhzUm9sZXMiXX0=